type token =
  | CONST of (int)
  | VARIABLE of (string)
  | TAFFECT of (string)
  | ADD
  | MINUS
  | MULT
  | DIV
  | MOD
  | AND
  | OR
  | NOT
  | EGALE
  | NEG
  | SUPS
  | INFS
  | SUPE
  | INFE
  | PRINT
  | LET
  | IN
  | IF
  | THEN
  | ELSE
  | BEGIN
  | END
  | FUN
  | IMPLIES
  | REC
  | LPAREN
  | RPAREN
  | UNIT
  | EOL
  | EINSTR
  | TRY
  | WITH
  | EXCEPT
  | RAISE
  | REF
  | AFFECT
  | ACCESS
  | UNDERSCORE
  | PRSTR of (string)
  | PRNL
  | AMAKE
  | LARROW

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

open Interpreteur
open Fouine_type

# 56 "parser.ml"
let yytransl_const = [|
  260 (* ADD *);
  261 (* MINUS *);
  262 (* MULT *);
  263 (* DIV *);
  264 (* MOD *);
  265 (* AND *);
  266 (* OR *);
  267 (* NOT *);
  268 (* EGALE *);
  269 (* NEG *);
  270 (* SUPS *);
  271 (* INFS *);
  272 (* SUPE *);
  273 (* INFE *);
  274 (* PRINT *);
  275 (* LET *);
  276 (* IN *);
  277 (* IF *);
  278 (* THEN *);
  279 (* ELSE *);
  280 (* BEGIN *);
  281 (* END *);
  282 (* FUN *);
  283 (* IMPLIES *);
  284 (* REC *);
  285 (* LPAREN *);
  286 (* RPAREN *);
  287 (* UNIT *);
  288 (* EOL *);
  289 (* EINSTR *);
  290 (* TRY *);
  291 (* WITH *);
  292 (* EXCEPT *);
  293 (* RAISE *);
  294 (* REF *);
  295 (* AFFECT *);
  296 (* ACCESS *);
  297 (* UNDERSCORE *);
  299 (* PRNL *);
  300 (* AMAKE *);
  301 (* LARROW *);
    0|]

let yytransl_block = [|
  257 (* CONST *);
  258 (* VARIABLE *);
  259 (* TAFFECT *);
  298 (* PRSTR *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\004\000\004\000\004\000\004\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\005\000\
\005\000\008\000\008\000\006\000\007\000\007\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\003\000\001\000\006\000\003\000\
\002\000\001\000\001\000\001\000\006\000\003\000\006\000\003\000\
\007\000\005\000\006\000\001\000\007\000\003\000\007\000\002\000\
\003\000\002\000\005\000\003\000\003\000\003\000\002\000\003\000\
\003\000\003\000\001\000\001\000\003\000\003\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\002\000\002\000\
\003\000\002\000\003\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\011\000\000\000\055\000\000\000\000\000\000\000\
\020\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\000\000\000\000\000\
\000\000\024\000\004\000\000\000\006\000\003\000\026\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\047\000\000\000\
\054\000\053\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\050\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\042\000\043\000\044\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\021\000\022\000\023\000\024\000\073\000\025\000\026\000\038\000"

let yysindex = "\003\000\
\166\255\000\000\000\000\000\000\166\255\166\255\166\255\166\255\
\032\255\166\255\166\255\023\255\166\255\000\000\166\255\229\254\
\023\255\000\000\000\000\027\255\000\000\142\001\243\254\027\255\
\000\000\027\255\156\001\008\002\006\003\236\002\000\000\023\255\
\018\255\065\255\186\001\208\001\005\255\000\000\222\001\007\255\
\027\255\000\000\000\000\166\255\000\000\000\000\000\000\166\255\
\166\255\166\255\166\255\166\255\166\255\166\255\166\255\166\255\
\166\255\166\255\166\255\166\255\000\000\166\255\000\000\166\255\
\000\000\000\000\242\254\023\255\166\255\122\255\021\255\025\255\
\041\255\166\255\000\000\166\255\000\000\000\000\002\255\000\000\
\252\001\008\002\008\002\115\255\115\255\115\255\006\003\006\003\
\250\002\000\000\000\000\000\000\000\000\000\000\236\002\250\002\
\166\255\052\255\026\002\166\255\048\002\166\255\166\255\000\000\
\166\255\070\002\250\002\023\255\000\000\250\002\166\255\166\255\
\092\002\166\255\114\002\136\002\136\002\166\255\014\255\136\002\
\136\002\166\255\136\002\166\255\236\002\166\255\136\002\136\002\
\250\002"

let yyrindex = "\000\000\
\000\000\000\000\246\255\210\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\034\255\000\000\
\000\000\092\000\000\000\074\001\252\000\156\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\124\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\060\000\000\000\000\000\
\000\000\096\001\110\001\156\000\188\000\220\000\028\001\060\001\
\246\000\000\000\000\000\000\000\000\000\000\000\150\000\022\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\142\002\000\000\000\000\148\002\000\000\000\000\
\000\000\000\000\000\000\055\255\214\000\000\000\000\000\168\002\
\182\002\000\000\186\002\000\000\182\000\000\000\200\002\204\002\
\164\002"

let yygindex = "\000\000\
\000\000\251\255\067\000\042\000\002\000\000\000\000\000\041\000"

let yytablesize = 1047
let yytable = "\027\000\
\028\000\029\000\030\000\001\000\035\000\036\000\031\000\039\000\
\041\000\040\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\063\000\055\000\056\000\057\000\058\000\059\000\060\000\
\031\000\064\000\031\000\043\000\031\000\069\000\097\000\076\000\
\102\000\031\000\003\000\003\000\103\000\108\000\081\000\062\000\
\126\000\079\000\082\000\083\000\084\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\044\000\
\095\000\045\000\096\000\032\000\105\000\047\000\003\000\099\000\
\101\000\065\000\031\000\066\000\106\000\098\000\107\000\111\000\
\033\000\104\000\049\000\034\000\070\000\077\000\037\000\000\000\
\000\000\000\000\080\000\042\000\000\000\000\000\046\000\000\000\
\000\000\000\000\046\000\110\000\046\000\000\000\113\000\071\000\
\115\000\116\000\068\000\117\000\072\000\000\000\000\000\037\000\
\000\000\120\000\121\000\046\000\123\000\000\000\000\000\000\000\
\125\000\000\000\000\000\000\000\127\000\000\000\128\000\000\000\
\129\000\000\000\003\000\004\000\005\000\000\000\006\000\056\000\
\057\000\058\000\059\000\060\000\007\000\000\000\072\000\000\000\
\000\000\000\000\072\000\008\000\009\000\000\000\010\000\000\000\
\000\000\011\000\000\000\012\000\000\000\000\000\013\000\000\000\
\014\000\000\000\000\000\015\000\000\000\000\000\016\000\100\000\
\000\000\017\000\000\000\018\000\019\000\020\000\003\000\004\000\
\005\000\000\000\006\000\000\000\000\000\000\000\119\000\009\000\
\007\000\009\000\009\000\000\000\009\000\000\000\000\000\008\000\
\009\000\009\000\010\000\009\000\009\000\011\000\009\000\012\000\
\000\000\000\000\013\000\000\000\014\000\000\000\000\000\015\000\
\000\000\000\000\016\000\000\000\000\000\017\000\000\000\018\000\
\019\000\020\000\002\000\002\000\000\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\000\000\035\000\035\000\035\000\
\035\000\035\000\035\000\000\000\000\000\035\000\000\000\035\000\
\035\000\000\000\035\000\000\000\000\000\000\000\002\000\035\000\
\002\000\035\000\035\000\000\000\035\000\000\000\004\000\004\000\
\002\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\000\000\036\000\036\000\036\000\036\000\036\000\036\000\000\000\
\000\000\036\000\000\000\036\000\036\000\000\000\036\000\000\000\
\000\000\000\000\004\000\036\000\004\000\036\000\036\000\000\000\
\036\000\006\000\006\000\000\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\000\000\012\000\012\000\012\000\012\000\
\012\000\012\000\000\000\000\000\012\000\000\000\012\000\012\000\
\000\000\012\000\000\000\000\000\000\000\006\000\012\000\006\000\
\012\000\012\000\000\000\012\000\005\000\005\000\000\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\000\000\014\000\
\014\000\014\000\014\000\014\000\014\000\000\000\000\000\014\000\
\000\000\014\000\014\000\000\000\014\000\000\000\000\000\000\000\
\005\000\014\000\005\000\014\000\014\000\000\000\014\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\000\000\000\000\046\000\
\000\000\046\000\046\000\000\000\046\000\000\000\000\000\000\000\
\000\000\046\000\000\000\046\000\046\000\000\000\046\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\000\000\028\000\
\028\000\028\000\028\000\028\000\028\000\000\000\000\000\028\000\
\000\000\028\000\028\000\000\000\028\000\000\000\000\000\000\000\
\000\000\028\000\000\000\028\000\028\000\000\000\028\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\000\000\032\000\
\000\000\016\000\000\000\016\000\016\000\000\000\016\000\032\000\
\000\000\032\000\032\000\016\000\032\000\016\000\016\000\000\000\
\016\000\032\000\000\000\032\000\032\000\000\000\032\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\000\000\033\000\
\000\000\007\000\000\000\007\000\007\000\000\000\007\000\033\000\
\000\000\033\000\033\000\007\000\033\000\007\000\007\000\000\000\
\007\000\033\000\000\000\033\000\033\000\000\000\033\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\000\000\034\000\
\000\000\018\000\000\000\018\000\018\000\000\000\018\000\034\000\
\000\000\034\000\034\000\018\000\034\000\018\000\000\000\000\000\
\018\000\034\000\000\000\034\000\034\000\000\000\034\000\039\000\
\039\000\040\000\000\000\000\000\039\000\039\000\000\000\039\000\
\000\000\040\000\000\000\040\000\040\000\000\000\040\000\039\000\
\000\000\039\000\039\000\040\000\039\000\040\000\040\000\000\000\
\040\000\039\000\000\000\039\000\039\000\000\000\039\000\037\000\
\037\000\025\000\000\000\000\000\037\000\037\000\000\000\037\000\
\000\000\025\000\000\000\025\000\025\000\000\000\025\000\037\000\
\000\000\037\000\037\000\025\000\037\000\025\000\025\000\000\000\
\025\000\037\000\000\000\037\000\037\000\000\000\037\000\038\000\
\038\000\000\000\000\000\000\000\038\000\038\000\000\000\038\000\
\000\000\000\000\000\000\000\000\000\000\031\000\031\000\038\000\
\000\000\038\000\038\000\000\000\038\000\031\000\000\000\000\000\
\000\000\038\000\000\000\038\000\038\000\031\000\038\000\031\000\
\031\000\000\000\031\000\029\000\029\000\000\000\000\000\031\000\
\000\000\031\000\031\000\029\000\031\000\000\000\000\000\000\000\
\000\000\030\000\030\000\029\000\000\000\029\000\029\000\000\000\
\029\000\030\000\000\000\000\000\000\000\029\000\000\000\029\000\
\029\000\030\000\029\000\030\000\030\000\000\000\030\000\000\000\
\000\000\000\000\000\000\030\000\000\000\030\000\030\000\000\000\
\030\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\000\000\055\000\056\000\057\000\058\000\059\000\060\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\000\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\067\000\000\000\000\000\062\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\000\000\055\000\056\000\057\000\
\058\000\059\000\060\000\000\000\000\000\000\000\000\000\074\000\
\000\000\000\000\000\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\062\000\055\000\056\000\057\000\058\000\059\000\
\060\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\075\000\055\000\056\000\057\000\058\000\059\000\060\000\000\000\
\062\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\078\000\000\000\000\000\062\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\000\000\055\000\
\056\000\057\000\058\000\059\000\060\000\050\000\051\000\052\000\
\053\000\054\000\000\000\000\000\056\000\057\000\058\000\059\000\
\060\000\109\000\000\000\000\000\062\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\000\000\055\000\056\000\057\000\
\058\000\059\000\060\000\000\000\000\000\112\000\000\000\000\000\
\000\000\000\000\000\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\062\000\055\000\056\000\057\000\058\000\059\000\
\060\000\000\000\000\000\114\000\000\000\000\000\000\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\062\000\055\000\056\000\057\000\058\000\059\000\060\000\000\000\
\000\000\000\000\000\000\000\000\118\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\062\000\055\000\
\056\000\057\000\058\000\059\000\060\000\000\000\000\000\122\000\
\000\000\000\000\000\000\000\000\000\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\062\000\055\000\056\000\057\000\
\058\000\059\000\060\000\000\000\000\000\124\000\000\000\000\000\
\000\000\000\000\000\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\062\000\055\000\056\000\057\000\058\000\059\000\
\060\000\051\000\000\000\000\000\000\000\000\000\000\000\027\000\
\000\000\051\000\000\000\051\000\051\000\000\000\051\000\027\000\
\062\000\027\000\027\000\051\000\027\000\051\000\051\000\021\000\
\051\000\027\000\000\000\027\000\027\000\000\000\027\000\021\000\
\000\000\021\000\021\000\019\000\021\000\019\000\019\000\000\000\
\019\000\021\000\000\000\021\000\021\000\019\000\021\000\019\000\
\000\000\015\000\019\000\015\000\015\000\013\000\015\000\013\000\
\013\000\000\000\013\000\015\000\000\000\015\000\000\000\013\000\
\015\000\013\000\000\000\023\000\013\000\023\000\023\000\017\000\
\023\000\017\000\017\000\000\000\017\000\023\000\000\000\023\000\
\000\000\017\000\023\000\017\000\000\000\000\000\017\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\000\000\055\000\
\056\000\057\000\058\000\059\000\060\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\000\000\000\000\056\000\057\000\
\058\000\059\000\060\000\050\000\051\000\052\000\000\000\000\000\
\000\000\000\000\056\000\057\000\058\000\059\000\060\000"

let yycheck = "\005\000\
\006\000\007\000\008\000\001\000\010\000\011\000\002\001\013\000\
\036\001\015\000\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\031\001\012\001\013\001\014\001\015\001\016\001\017\001\
\002\001\039\001\002\001\001\001\002\001\012\001\045\001\027\001\
\012\001\002\001\001\001\002\001\012\001\036\001\044\000\033\001\
\027\001\035\001\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\029\001\
\062\000\031\001\064\000\028\001\020\001\020\000\029\001\069\000\
\070\000\024\000\002\001\026\000\074\000\068\000\076\000\020\001\
\041\001\072\000\020\001\009\000\012\001\037\000\012\000\255\255\
\255\255\255\255\041\000\017\000\255\255\255\255\020\000\255\255\
\255\255\255\255\024\000\097\000\026\000\255\255\100\000\031\001\
\102\000\103\000\032\000\105\000\034\000\255\255\255\255\037\000\
\255\255\111\000\112\000\041\000\114\000\255\255\255\255\255\255\
\118\000\255\255\255\255\255\255\122\000\255\255\124\000\255\255\
\126\000\255\255\001\001\002\001\003\001\255\255\005\001\013\001\
\014\001\015\001\016\001\017\001\011\001\255\255\068\000\255\255\
\255\255\255\255\072\000\018\001\019\001\255\255\021\001\255\255\
\255\255\024\001\255\255\026\001\255\255\255\255\029\001\255\255\
\031\001\255\255\255\255\034\001\255\255\255\255\037\001\038\001\
\255\255\040\001\255\255\042\001\043\001\044\001\001\001\002\001\
\003\001\255\255\005\001\255\255\255\255\255\255\108\000\020\001\
\011\001\022\001\023\001\255\255\025\001\255\255\255\255\018\001\
\019\001\030\001\021\001\032\001\033\001\024\001\035\001\026\001\
\255\255\255\255\029\001\255\255\031\001\255\255\255\255\034\001\
\255\255\255\255\037\001\255\255\255\255\040\001\255\255\042\001\
\043\001\044\001\001\001\002\001\255\255\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\255\255\022\001\
\023\001\255\255\025\001\255\255\255\255\255\255\029\001\030\001\
\031\001\032\001\033\001\255\255\035\001\255\255\001\001\002\001\
\039\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\255\255\022\001\023\001\255\255\025\001\255\255\
\255\255\255\255\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\255\255\020\001\255\255\022\001\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\255\255\035\001\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\255\255\022\001\023\001\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\033\001\255\255\035\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\255\255\022\001\023\001\255\255\025\001\255\255\255\255\255\255\
\255\255\030\001\255\255\032\001\033\001\255\255\035\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\255\255\022\001\023\001\255\255\025\001\255\255\255\255\255\255\
\255\255\030\001\255\255\032\001\033\001\255\255\035\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\255\255\012\001\
\255\255\020\001\255\255\022\001\023\001\255\255\025\001\020\001\
\255\255\022\001\023\001\030\001\025\001\032\001\033\001\255\255\
\035\001\030\001\255\255\032\001\033\001\255\255\035\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\255\255\012\001\
\255\255\020\001\255\255\022\001\023\001\255\255\025\001\020\001\
\255\255\022\001\023\001\030\001\025\001\032\001\033\001\255\255\
\035\001\030\001\255\255\032\001\033\001\255\255\035\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\255\255\012\001\
\255\255\020\001\255\255\022\001\023\001\255\255\025\001\020\001\
\255\255\022\001\023\001\030\001\025\001\032\001\255\255\255\255\
\035\001\030\001\255\255\032\001\033\001\255\255\035\001\004\001\
\005\001\012\001\255\255\255\255\009\001\010\001\255\255\012\001\
\255\255\020\001\255\255\022\001\023\001\255\255\025\001\020\001\
\255\255\022\001\023\001\030\001\025\001\032\001\033\001\255\255\
\035\001\030\001\255\255\032\001\033\001\255\255\035\001\004\001\
\005\001\012\001\255\255\255\255\009\001\010\001\255\255\012\001\
\255\255\020\001\255\255\022\001\023\001\255\255\025\001\020\001\
\255\255\022\001\023\001\030\001\025\001\032\001\033\001\255\255\
\035\001\030\001\255\255\032\001\033\001\255\255\035\001\004\001\
\005\001\255\255\255\255\255\255\009\001\010\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\004\001\005\001\020\001\
\255\255\022\001\023\001\255\255\025\001\012\001\255\255\255\255\
\255\255\030\001\255\255\032\001\033\001\020\001\035\001\022\001\
\023\001\255\255\025\001\004\001\005\001\255\255\255\255\030\001\
\255\255\032\001\033\001\012\001\035\001\255\255\255\255\255\255\
\255\255\004\001\005\001\020\001\255\255\022\001\023\001\255\255\
\025\001\012\001\255\255\255\255\255\255\030\001\255\255\032\001\
\033\001\020\001\035\001\022\001\023\001\255\255\025\001\255\255\
\255\255\255\255\255\255\030\001\255\255\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\255\255\255\255\033\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\022\001\
\255\255\255\255\255\255\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\033\001\012\001\013\001\014\001\015\001\016\001\
\017\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\025\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\255\255\255\255\033\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\006\001\007\001\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\030\001\255\255\255\255\033\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\255\255\255\255\
\255\255\255\255\255\255\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\033\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\255\255\255\255\255\255\255\255\
\255\255\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\033\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\255\255\255\255\023\001\255\255\255\255\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\033\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\255\255\255\255\255\255\255\255\255\255\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\033\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\255\255\255\255\
\255\255\255\255\255\255\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\033\001\012\001\013\001\014\001\015\001\016\001\
\017\001\012\001\255\255\255\255\255\255\255\255\255\255\012\001\
\255\255\020\001\255\255\022\001\023\001\255\255\025\001\020\001\
\033\001\022\001\023\001\030\001\025\001\032\001\033\001\012\001\
\035\001\030\001\255\255\032\001\033\001\255\255\035\001\020\001\
\255\255\022\001\023\001\020\001\025\001\022\001\023\001\255\255\
\025\001\030\001\255\255\032\001\033\001\030\001\035\001\032\001\
\255\255\020\001\035\001\022\001\023\001\020\001\025\001\022\001\
\023\001\255\255\025\001\030\001\255\255\032\001\255\255\030\001\
\035\001\032\001\255\255\020\001\035\001\022\001\023\001\020\001\
\025\001\022\001\023\001\255\255\025\001\030\001\255\255\032\001\
\255\255\030\001\035\001\032\001\255\255\255\255\035\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001"

let yynames_const = "\
  ADD\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  MOD\000\
  AND\000\
  OR\000\
  NOT\000\
  EGALE\000\
  NEG\000\
  SUPS\000\
  INFS\000\
  SUPE\000\
  INFE\000\
  PRINT\000\
  LET\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  BEGIN\000\
  END\000\
  FUN\000\
  IMPLIES\000\
  REC\000\
  LPAREN\000\
  RPAREN\000\
  UNIT\000\
  EOL\000\
  EINSTR\000\
  TRY\000\
  WITH\000\
  EXCEPT\000\
  RAISE\000\
  REF\000\
  AFFECT\000\
  ACCESS\000\
  UNDERSCORE\000\
  PRNL\000\
  AMAKE\000\
  LARROW\000\
  "

let yynames_block = "\
  CONST\000\
  VARIABLE\000\
  TAFFECT\000\
  PRSTR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                                                  ( _1 )
# 514 "parser.ml"
               : Fouine_type.programme))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                                                  ( Var(_1) )
# 521 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 60 "parser.mly"
                                   ( _1 )
# 528 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 61 "parser.mly"
                                    ( Const(_1) )
# 535 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                                                  ( _2 )
# 542 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
                                                  ( Unit )
# 548 "parser.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                                               ( IfThenElse(_2,_4,_6) )
# 557 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                                                  ( _2 )
# 564 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                                     ( PrInt(_2) )
# 571 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
                                                  ( PrStr(_1) )
# 578 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
                                                  ( PrNL )
# 584 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                                                  ( Unit )
# 590 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'variable) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                                               ( Let(_2,_4,_6) )
# 599 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                                            ( _2 )
# 606 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                                                  ( Imp(_4,_6) )
# 614 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                                      ( Imp(_1,_3) )
# 622 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'variable) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                                                  ( Let(_2, Function_def(Const(0),_5), _7 ) )
# 631 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fun_arg) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                                          ( Let(_2, _3, _5) )
# 640 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'variable) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'fun_arg) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                                             ( LetRec(_3, _4, _6) )
# 649 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fun_def) in
    Obj.repr(
# 83 "parser.mly"
                                                  ( _1 )
# 656 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                                                  ( TryWith(_2,_5,_7) )
# 665 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 87 "parser.mly"
                                                  ( Raise(_3) )
# 672 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'variable) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                                                 ( Let(_2, Ref(_5), _7) )
# 681 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 91 "parser.mly"
                                                 ( Bang(_2) )
# 688 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                                                 ( Assign(_1,_3) )
# 696 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 95 "parser.mly"
                                                 ( AMake(_2) )
# 703 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                                 ( Affect(Var(_1), _2, _5) )
# 712 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                                                 ( Access(Var(_1), _2) )
# 720 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                      ( BinOp (_1, Add, _3) )
# 728 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                                           ( BinOp (_1, Minus, _3) )
# 736 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                           ( UnOp(Neg, _2) )
# 743 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                                          ( BinOp (_1, Mult, _3) )
# 751 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                                      ( BinOp (_1, Div, _3) )
# 759 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                                      ( BinOp (_1, Mod, _3) )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
                                  ( Var(_1) )
# 774 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 107 "parser.mly"
                                   ( Const(_1) )
# 781 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                                      ( BinOp(_1,And,_3) )
# 789 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                                     ( BinOp(_1,Or,_3) )
# 797 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                                                 ( UnOp(Not,_2) )
# 804 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                                        ( BinOp(_1, Equal ,_3) )
# 812 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                                      ( BinOp(_1, Neq ,_3) )
# 820 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                                       ( BinOp(_1, Sup ,_3) )
# 828 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                                       ( BinOp(_1, Inf ,_3) )
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                                       ( BinOp(_1, Supeq ,_3) )
# 844 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                                       ( BinOp(_1, Infeq ,_3) )
# 852 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funct_call) in
    Obj.repr(
# 120 "parser.mly"
                           ( _1 )
# 859 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    Obj.repr(
# 121 "parser.mly"
                                                 ( Function_call(_1, Const(0) ) )
# 866 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_arg) in
    Obj.repr(
# 126 "parser.mly"
                               ( Function_def(_1, _2) )
# 874 "parser.ml"
               : 'fun_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                                                 ( Function_def(_1, _3) )
# 882 "parser.ml"
               : 'fun_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_arg2) in
    Obj.repr(
# 131 "parser.mly"
                                ( Function_def(_1, _2) )
# 890 "parser.ml"
               : 'fun_arg2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                                                 ( Function_def(_1, _3) )
# 898 "parser.ml"
               : 'fun_arg2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_arg2) in
    Obj.repr(
# 136 "parser.mly"
                                                   ( _2 )
# 905 "parser.ml"
               : 'fun_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'funct_call) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 141 "parser.mly"
                                                  ( Function_call(_1, _2) )
# 913 "parser.ml"
               : 'funct_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sexpr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 142 "parser.mly"
                                                  ( Function_call(_1, _2) )
# 921 "parser.ml"
               : 'funct_call))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Fouine_type.programme)
