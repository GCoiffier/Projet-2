### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules main.ml > main.ml.depends # cached
# Target: Interpreteur.ml.depends, tags: { extension:ml, file:Interpreteur.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules Interpreteur.ml > Interpreteur.ml.depends
# Target: environnement.ml.depends, tags: { extension:ml, file:environnement.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules environnement.ml > environnement.ml.depends # cached
# Target: dictionnaire.ml.depends, tags: { extension:ml, file:dictionnaire.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules dictionnaire.ml > dictionnaire.ml.depends # cached
# Target: dictionnaire.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:dictionnaire.cmo, file:dictionnaire.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o dictionnaire.cmo dictionnaire.ml # cached
# Target: fouine_type.ml.depends, tags: { extension:ml, file:fouine_type.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules fouine_type.ml > fouine_type.ml.depends # cached
# Target: fouine_type.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:fouine_type.cmo, file:fouine_type.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o fouine_type.cmo fouine_type.ml # cached
# Target: environnement.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:environnement.cmo, file:environnement.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o environnement.cmo environnement.ml # cached
# Target: machine.ml.depends, tags: { extension:ml, file:machine.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules machine.ml > machine.ml.depends # cached
# Target: machine.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:machine.cmo, file:machine.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o machine.cmo machine.ml # cached
# Target: lexParInterface.ml.depends, tags: { extension:ml, file:lexParInterface.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexParInterface.ml > lexParInterface.ml.depends # cached
# Target: Interpreteur.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:Interpreteur.cmo, file:Interpreteur.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o Interpreteur.cmo Interpreteur.ml
# Target: lexMachine.mll, tags: { extension:mll, file:lexMachine.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex -q lexMachine.mll
# Target: lexMachine.ml.depends, tags: { extension:ml, file:lexMachine.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexMachine.ml > lexMachine.ml.depends
# Target: parsMachine.mly, tags: { extension:mly, file:parsMachine.mly, infer, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc -v parsMachine.mly
# Target: parsMachine.mli.depends, tags: { extension:mli, file:parsMachine.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parsMachine.mli > parsMachine.mli.depends
# Target: parsMachine.cmi, tags: { byte, compile, extension:mli, file:parsMachine.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o parsMachine.cmi parsMachine.mli
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex -q lexer.mll
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexer.ml > lexer.ml.depends
# Target: parser.mly, tags: { extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc -v parser.mly
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.mli > parser.mli.depends
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o parser.cmi parser.mli
# Target: lexMachine.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexMachine.cmo, file:lexMachine.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o lexMachine.cmo lexMachine.ml
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o lexer.cmo lexer.ml
# Target: lexParInterface.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexParInterface.cmo, file:lexParInterface.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o lexParInterface.cmo lexParInterface.ml
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o main.cmo main.ml
# Target: dictionnaire.cmx, tags: { compile, extension:cmx, extension:ml, file:dictionnaire.cmx, file:dictionnaire.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o dictionnaire.cmx dictionnaire.ml
# Target: fouine_type.cmx, tags: { compile, extension:cmx, extension:ml, file:fouine_type.cmx, file:fouine_type.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o fouine_type.cmx fouine_type.ml
# Target: environnement.cmx, tags: { compile, extension:cmx, extension:ml, file:environnement.cmx, file:environnement.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o environnement.cmx environnement.ml
# Target: machine.cmx, tags: { compile, extension:cmx, extension:ml, file:machine.cmx, file:machine.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o machine.cmx machine.ml
# Target: Interpreteur.cmx, tags: { compile, extension:cmx, extension:ml, file:Interpreteur.cmx, file:Interpreteur.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o Interpreteur.cmx Interpreteur.ml
# Target: parsMachine.ml.depends, tags: { extension:ml, file:parsMachine.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parsMachine.ml > parsMachine.ml.depends
# Target: parsMachine.cmx, tags: { compile, extension:cmx, extension:ml, file:parsMachine.cmx, file:parsMachine.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o parsMachine.cmx parsMachine.ml
+ /usr/bin/ocamlopt -c -o parsMachine.cmx parsMachine.ml
File "parsMachine.mly", line 56, characters 17-28:
Error: The constructor LET expects 0 argument(s),
       but is applied here to 1 argument(s)
Command exited with code 2.
# Compilation unsuccessful.
