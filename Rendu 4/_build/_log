### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules main.ml > main.ml.depends
# Target: debug.ml.depends, tags: { extension:ml, file:debug.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules debug.ml > debug.ml.depends
# Target: environnement.ml.depends, tags: { extension:ml, file:environnement.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules environnement.ml > environnement.ml.depends
# Target: dictionnaire.ml.depends, tags: { extension:ml, file:dictionnaire.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules dictionnaire.ml > dictionnaire.ml.depends
# Target: fouine_type.ml.depends, tags: { extension:ml, file:fouine_type.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules fouine_type.ml > fouine_type.ml.depends
# Target: dictionnaire.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:dictionnaire.cmo, file:dictionnaire.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o dictionnaire.cmo dictionnaire.ml
# Target: fouine_type.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:fouine_type.cmo, file:fouine_type.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o fouine_type.cmo fouine_type.ml
# Target: environnement.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:environnement.cmo, file:environnement.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o environnement.cmo environnement.ml
# Target: Interpreteur.ml.depends, tags: { extension:ml, file:Interpreteur.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules Interpreteur.ml > Interpreteur.ml.depends
# Target: lexParInterface.ml.depends, tags: { extension:ml, file:lexParInterface.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexParInterface.ml > lexParInterface.ml.depends
# Target: Interpreteur.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:Interpreteur.cmo, file:Interpreteur.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o Interpreteur.cmo Interpreteur.ml
# Target: lexMachine.mll, tags: { extension:mll, file:lexMachine.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex -q lexMachine.mll
# Target: lexMachine.ml.depends, tags: { extension:ml, file:lexMachine.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexMachine.ml > lexMachine.ml.depends
# Target: parsMachine.mly, tags: { extension:mly, file:parsMachine.mly, infer, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc -v parsMachine.mly
# Target: parsMachine.mli.depends, tags: { extension:mli, file:parsMachine.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parsMachine.mli > parsMachine.mli.depends
# Target: machine.ml.depends, tags: { extension:ml, file:machine.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules machine.ml > machine.ml.depends
# Target: machine.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:machine.cmo, file:machine.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o machine.cmo machine.ml
+ /usr/bin/ocamlc -c -o machine.cmo machine.ml
File "machine.ml", line 49, characters 16-22:
Error: This variant expression is expected to have type env_type
       The constructor ACCESS does not belong to type env_type
Command exited with code 2.
# Compilation unsuccessful.
