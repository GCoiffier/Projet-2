### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules main.ml > main.ml.depends
# Target: bdd.ml.depends, tags: { extension:ml, file:bdd.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules bdd.ml > bdd.ml.depends
# Target: formula.ml.depends, tags: { extension:ml, file:formula.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules formula.ml > formula.ml.depends
# Target: visited.ml.depends, tags: { extension:ml, file:visited.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules visited.ml > visited.ml.depends
# Target: formula.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:formula.cmo, file:formula.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o formula.cmo formula.ml
# Target: visited.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:visited.cmo, file:visited.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o visited.cmo visited.ml
# Target: lexParInterface.ml.depends, tags: { extension:ml, file:lexParInterface.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexParInterface.ml > lexParInterface.ml.depends
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex -q lexer.mll
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexer.ml > lexer.ml.depends
# Target: parser.mly, tags: { extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc -v parser.mly
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.mli > parser.mli.depends
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o parser.cmi parser.mli
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o lexer.cmo lexer.ml
# Target: bdd.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:bdd.cmo, file:bdd.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o bdd.cmo bdd.ml
# Target: lexParInterface.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexParInterface.cmo, file:lexParInterface.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o lexParInterface.cmo lexParInterface.ml
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o main.cmo main.ml
# Target: formula.cmx, tags: { compile, extension:cmx, extension:ml, file:formula.cmx, file:formula.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o formula.cmx formula.ml
# Target: visited.cmx, tags: { compile, extension:cmx, extension:ml, file:visited.cmx, file:visited.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o visited.cmx visited.ml
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o parser.cmx parser.ml
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o lexer.cmx lexer.ml
# Target: bdd.cmx, tags: { compile, extension:cmx, extension:ml, file:bdd.cmx, file:bdd.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o bdd.cmx bdd.ml
# Target: lexParInterface.cmx, tags: { compile, extension:cmx, extension:ml, file:lexParInterface.cmx, file:lexParInterface.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o lexParInterface.cmx lexParInterface.ml
# Target: main.cmx, tags: { compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o main.cmx main.ml
# Target: main.native, tags: { dont_link_with, extension:native, file:main.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt unix.cmxa formula.cmx visited.cmx bdd.cmx parser.cmx lexer.cmx lexParInterface.cmx main.cmx -o main.native
# Compilation successful.
