type token =
  | CONST of (int)
  | VARIABLE of (string)
  | ADD
  | MINUS
  | MULT
  | DIV
  | MOD
  | AND
  | OR
  | NOT
  | EGALE
  | NEG
  | SUPS
  | INFS
  | SUPE
  | INFE
  | IF
  | THEN
  | ELSE
  | PRINT
  | LET
  | IN
  | FUN
  | IMPLIES
  | LPAREN
  | RPAREN
  | EOL
  | EINSTR

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* --- pr√©ambule: ici du code Caml --- *)

open Fouine

# 39 "parser.ml"
let yytransl_const = [|
  259 (* ADD *);
  260 (* MINUS *);
  261 (* MULT *);
  262 (* DIV *);
  263 (* MOD *);
  264 (* AND *);
  265 (* OR *);
  266 (* NOT *);
  267 (* EGALE *);
  268 (* NEG *);
  269 (* SUPS *);
  270 (* INFS *);
  271 (* SUPE *);
  272 (* INFE *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* PRINT *);
  277 (* LET *);
  278 (* IN *);
  279 (* FUN *);
  280 (* IMPLIES *);
  281 (* LPAREN *);
  282 (* RPAREN *);
  283 (* EOL *);
  284 (* EINSTR *);
    0|]

let yytransl_block = [|
  257 (* CONST *);
  258 (* VARIABLE *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\000\000"

let yylen = "\002\000\
\002\000\006\000\002\000\006\000\003\000\003\000\009\000\006\000\
\003\000\003\000\003\000\003\000\003\000\001\000\001\000\003\000\
\003\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\015\000\014\000\000\000\000\000\000\000\000\000\
\000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\010\000\011\000"

let yysindex = "\002\000\
\043\000\000\000\000\000\000\000\043\000\043\000\043\000\003\255\
\043\000\000\000\028\255\107\000\054\255\168\255\251\254\072\255\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\000\000\043\000\043\000\
\031\000\000\000\089\000\089\000\080\255\080\255\080\255\107\000\
\107\000\168\255\168\255\168\255\168\255\168\255\168\255\168\255\
\098\255\005\255\116\255\043\000\240\254\043\000\168\255\043\000\
\168\255\142\255\043\000\168\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\244\255\000\000\115\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\000\066\000\182\255\207\255\232\255\008\000\
\020\000\141\255\176\255\201\255\238\255\056\000\106\000\112\000\
\000\000\000\000\000\000\000\000\000\000\000\000\118\000\000\000\
\124\000\000\000\000\000\130\000"

let yygindex = "\000\000\
\000\000\251\255"

let yytablesize = 413
let yytable = "\012\000\
\013\000\014\000\001\000\016\000\015\000\033\000\053\000\056\000\
\000\000\000\000\000\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\000\000\048\000\049\000\051\000\000\000\000\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\000\000\024\000\025\000\
\026\000\027\000\028\000\029\000\000\000\000\000\055\000\000\000\
\057\000\000\000\058\000\000\000\000\000\060\000\030\000\031\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\000\000\
\024\000\025\000\026\000\027\000\028\000\029\000\000\000\032\000\
\000\000\000\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\031\000\024\000\025\000\026\000\027\000\028\000\029\000\
\000\000\000\000\024\000\025\000\026\000\027\000\028\000\029\000\
\000\000\034\000\000\000\031\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\031\000\024\000\025\000\026\000\027\000\
\028\000\029\000\000\000\000\000\052\000\000\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\031\000\024\000\025\000\
\026\000\027\000\028\000\029\000\003\000\003\000\000\000\000\000\
\003\000\054\000\000\000\000\000\003\000\003\000\000\000\031\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\000\000\
\024\000\025\000\026\000\027\000\028\000\029\000\019\000\019\000\
\000\000\000\000\019\000\059\000\000\000\000\000\019\000\019\000\
\000\000\031\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\000\000\024\000\025\000\026\000\027\000\028\000\029\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\000\000\
\000\000\020\000\020\000\031\000\000\000\020\000\000\000\011\000\
\011\000\020\000\020\000\011\000\000\000\000\000\000\000\011\000\
\011\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\000\000\021\000\021\000\000\000\000\000\021\000\000\000\
\012\000\012\000\021\000\021\000\012\000\000\000\000\000\000\000\
\012\000\012\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\000\000\000\000\000\000\000\000\000\000\018\000\018\000\
\000\000\013\000\013\000\018\000\018\000\013\000\000\000\022\000\
\022\000\013\000\013\000\022\000\000\000\018\000\018\000\022\000\
\022\000\018\000\016\000\016\000\000\000\018\000\018\000\016\000\
\016\000\000\000\000\000\000\000\000\000\000\000\017\000\017\000\
\000\000\016\000\016\000\017\000\017\000\016\000\000\000\003\000\
\004\000\016\000\016\000\000\000\000\000\017\000\017\000\000\000\
\005\000\017\000\000\000\003\000\004\000\017\000\017\000\006\000\
\000\000\000\000\007\000\008\000\005\000\050\000\000\000\009\000\
\009\000\009\000\000\000\006\000\000\000\000\000\007\000\008\000\
\000\000\000\000\000\000\009\000\010\000\010\000\000\000\009\000\
\009\000\023\000\023\000\009\000\000\000\023\000\000\000\009\000\
\009\000\023\000\023\000\010\000\010\000\000\000\000\000\010\000\
\000\000\000\000\000\000\010\000\010\000\019\000\020\000\021\000\
\022\000\023\000\000\000\024\000\025\000\026\000\027\000\028\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
\020\000\021\000\000\000\000\000\031\000\024\000\025\000\026\000\
\027\000\028\000\029\000\024\000\024\000\000\000\000\000\024\000\
\000\000\006\000\006\000\024\000\024\000\006\000\031\000\002\000\
\002\000\006\000\006\000\002\000\000\000\004\000\004\000\002\000\
\002\000\004\000\000\000\007\000\007\000\004\000\004\000\007\000\
\000\000\000\000\000\000\007\000\007\000"

let yycheck = "\005\000\
\006\000\007\000\001\000\009\000\002\001\011\001\002\001\024\001\
\255\255\255\255\255\255\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\255\255\031\000\032\000\033\000\255\255\255\255\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\255\255\052\000\255\255\
\054\000\255\255\056\000\255\255\255\255\059\000\027\001\028\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\255\255\255\255\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\028\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\026\001\255\255\028\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\028\001\011\001\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\255\255\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\028\001\011\001\012\001\
\013\001\014\001\015\001\016\001\018\001\019\001\255\255\255\255\
\022\001\022\001\255\255\255\255\026\001\027\001\255\255\028\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\018\001\019\001\
\255\255\255\255\022\001\022\001\255\255\255\255\026\001\027\001\
\255\255\028\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\018\001\019\001\028\001\255\255\022\001\255\255\018\001\
\019\001\026\001\027\001\022\001\255\255\255\255\255\255\026\001\
\027\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\255\255\255\255\018\001\019\001\255\255\255\255\022\001\255\255\
\018\001\019\001\026\001\027\001\022\001\255\255\255\255\255\255\
\026\001\027\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\255\255\255\255\003\001\004\001\
\255\255\018\001\019\001\008\001\009\001\022\001\255\255\018\001\
\019\001\026\001\027\001\022\001\255\255\018\001\019\001\026\001\
\027\001\022\001\003\001\004\001\255\255\026\001\027\001\008\001\
\009\001\255\255\255\255\255\255\255\255\255\255\003\001\004\001\
\255\255\018\001\019\001\008\001\009\001\022\001\255\255\001\001\
\002\001\026\001\027\001\255\255\255\255\018\001\019\001\255\255\
\010\001\022\001\255\255\001\001\002\001\026\001\027\001\017\001\
\255\255\255\255\020\001\021\001\010\001\023\001\255\255\025\001\
\003\001\004\001\255\255\017\001\255\255\255\255\020\001\021\001\
\255\255\255\255\255\255\025\001\003\001\004\001\255\255\018\001\
\019\001\018\001\019\001\022\001\255\255\022\001\255\255\026\001\
\027\001\026\001\027\001\018\001\019\001\255\255\255\255\022\001\
\255\255\255\255\255\255\026\001\027\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\005\001\
\006\001\007\001\255\255\255\255\028\001\011\001\012\001\013\001\
\014\001\015\001\016\001\018\001\019\001\255\255\255\255\022\001\
\255\255\018\001\019\001\026\001\027\001\022\001\028\001\018\001\
\019\001\026\001\027\001\022\001\255\255\018\001\019\001\026\001\
\027\001\022\001\255\255\018\001\019\001\026\001\027\001\022\001\
\255\255\255\255\255\255\026\001\027\001"

let yynames_const = "\
  ADD\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  MOD\000\
  AND\000\
  OR\000\
  NOT\000\
  EGALE\000\
  NEG\000\
  SUPS\000\
  INFS\000\
  SUPE\000\
  INFE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  PRINT\000\
  LET\000\
  IN\000\
  FUN\000\
  IMPLIES\000\
  LPAREN\000\
  RPAREN\000\
  EOL\000\
  EINSTR\000\
  "

let yynames_block = "\
  CONST\000\
  VARIABLE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 31 "parser.mly"
                           ( _1 )
# 272 "parser.ml"
               : Fouine.programme))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 34 "parser.mly"
                                     ( IfThenElse(_2,_4,_6) )
# 281 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 35 "parser.mly"
                                 ( PrInt(_2) )
# 288 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                                     ( Let(_2,_4,_6) )
# 297 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 37 "parser.mly"
                                    ( _2 )
# 304 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "parser.mly"
                                  ( Imp(_1,_3) )
# 312 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                                                          ( Function(_2, _7, _9) )
# 322 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
                                       ( Function(_2, _4 ,_6) )
# 331 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 44 "parser.mly"
                     ( BinOp (_1, Add, _3) )
# 339 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
                      ( BinOp (_1, Minus, _3) )
# 347 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 46 "parser.mly"
                     ( BinOp (_1, Mult, _3) )
# 355 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 47 "parser.mly"
                     ( BinOp (_1, Div, _3) )
# 363 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 48 "parser.mly"
                     ( BinOp (_1, Mod, _3) )
# 371 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 49 "parser.mly"
                   ( Var(_1) )
# 378 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 50 "parser.mly"
                    ( Const(_1) )
# 385 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                       ( BinOp(_1,And,_3) )
# 393 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                      ( BinOp(_1,Or,_3) )
# 401 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                          ( UnOp(Not,_2) )
# 408 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                       ( BinOp(_1, Equal ,_3) )
# 416 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                       ( BinOp(_1, Neq ,_3) )
# 424 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                      ( BinOp(_1, Sup ,_3) )
# 432 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                      ( BinOp(_1, Inf ,_3) )
# 440 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                      ( BinOp(_1, Supeq ,_3) )
# 448 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                      ( BinOp(_1, Infeq ,_3) )
# 456 "parser.ml"
               : 'expr))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Fouine.programme)
