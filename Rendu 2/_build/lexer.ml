# 1 "lexer.mll"
 
  open Parser;;        (* le type "token" est d�fini dans parser.mli *)
(* ce n'est pas � vous d'�crire ce fichier, il est engendr� automatiquement *)
exception Eof;;

# 8 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\035\000\015\000\000\000\009\000\001\000\012\000\013\000\
    \240\255\000\000\002\000\244\255\245\255\014\000\247\255\018\000\
    \006\000\000\000\005\000\002\000\004\000\255\255\005\000\009\000\
    \004\000\254\255\005\000\253\255\251\255\252\255\005\000\012\000\
    \250\255\008\000\033\000\249\255\229\255\241\255\000\000\243\255\
    \025\000\242\255\235\255\239\255\236\255\234\255\233\255\020\000\
    \232\255";
  Lexing.lex_backtrk = 
   "\255\255\025\000\024\000\255\255\255\255\255\255\017\000\018\000\
    \255\255\255\255\255\255\255\255\255\255\009\000\255\255\007\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_default = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\000\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\255\255\000\000\000\000\000\000\255\255\255\255\
    \000\000\255\255\255\255\000\000\000\000\000\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\021\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\000\000\000\000\000\000\000\000\000\000\005\000\045\000\
    \000\000\000\000\012\000\014\000\000\000\013\000\000\000\011\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\000\000\015\000\007\000\008\000\006\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\044\000\042\000\043\000\037\000\036\000\023\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\000\000\000\000\039\000\016\000\009\000\026\000\
    \030\000\018\000\031\000\028\000\019\000\010\000\003\000\047\000\
    \020\000\038\000\033\000\029\000\017\000\040\000\022\000\024\000\
    \025\000\027\000\032\000\034\000\004\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\046\000\035\000\041\000\
    \048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\005\000\
    \255\255\255\255\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\006\000\007\000\007\000\013\000\015\000\022\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\038\000\000\000\000\000\019\000\
    \017\000\000\000\030\000\018\000\000\000\000\000\000\000\003\000\
    \000\000\010\000\016\000\018\000\000\000\009\000\020\000\023\000\
    \024\000\026\000\031\000\033\000\000\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\004\000\034\000\040\000\
    \047\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 8 "lexer.mll"
                         ( token lexbuf )
# 131 "lexer.ml"

  | 1 ->
# 10 "lexer.mll"
             ( PRINT )
# 136 "lexer.ml"

  | 2 ->
# 12 "lexer.mll"
             ( LET )
# 141 "lexer.ml"

  | 3 ->
# 13 "lexer.mll"
            ( IN )
# 146 "lexer.ml"

  | 4 ->
# 14 "lexer.mll"
            ( IF )
# 151 "lexer.ml"

  | 5 ->
# 15 "lexer.mll"
             ( THEN )
# 156 "lexer.ml"

  | 6 ->
# 16 "lexer.mll"
             ( ELSE )
# 161 "lexer.ml"

  | 7 ->
# 17 "lexer.mll"
           ( EINSTR )
# 166 "lexer.ml"

  | 8 ->
# 19 "lexer.mll"
           ( ADD )
# 171 "lexer.ml"

  | 9 ->
# 20 "lexer.mll"
           ( MINUS )
# 176 "lexer.ml"

  | 10 ->
# 21 "lexer.mll"
            ( MULT )
# 181 "lexer.ml"

  | 11 ->
# 22 "lexer.mll"
           ( DIV )
# 186 "lexer.ml"

  | 12 ->
# 23 "lexer.mll"
            ( MOD )
# 191 "lexer.ml"

  | 13 ->
# 25 "lexer.mll"
            ( FUN )
# 196 "lexer.ml"

  | 14 ->
# 26 "lexer.mll"
           ( IMPLIES )
# 201 "lexer.ml"

  | 15 ->
# 28 "lexer.mll"
           ( EGALE )
# 206 "lexer.ml"

  | 16 ->
# 29 "lexer.mll"
           ( NEG )
# 211 "lexer.ml"

  | 17 ->
# 30 "lexer.mll"
           ( SUPS )
# 216 "lexer.ml"

  | 18 ->
# 31 "lexer.mll"
           ( INFS )
# 221 "lexer.ml"

  | 19 ->
# 32 "lexer.mll"
            ( SUPE )
# 226 "lexer.ml"

  | 20 ->
# 33 "lexer.mll"
            ( INFE )
# 231 "lexer.ml"

  | 21 ->
# 35 "lexer.mll"
            ( AND )
# 236 "lexer.ml"

  | 22 ->
# 36 "lexer.mll"
            ( OR )
# 241 "lexer.ml"

  | 23 ->
# 37 "lexer.mll"
            ( NOT )
# 246 "lexer.ml"

  | 24 ->
let
# 39 "lexer.mll"
                 s
# 252 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 39 "lexer.mll"
                     ( CONST (int_of_string s) )
# 256 "lexer.ml"

  | 25 ->
let
# 40 "lexer.mll"
                 s
# 262 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 40 "lexer.mll"
                     ( VARIABLE (s) )
# 266 "lexer.ml"

  | 26 ->
# 42 "lexer.mll"
           ( EOL )
# 271 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

