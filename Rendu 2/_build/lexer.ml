# 1 "lexer.mll"
 
  open Parser;;        (* le type "token" est d�fini dans parser.mli *)
(* ce n'est pas � vous d'�crire ce fichier, il est engendr� automatiquement *)
exception Eof;;

# 8 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\035\000\015\000\000\000\009\000\001\000\012\000\013\000\
    \242\255\243\255\244\255\245\255\246\255\247\255\017\000\001\000\
    \000\000\004\000\001\000\001\000\255\255\004\000\003\000\001\000\
    \254\255\002\000\253\255\251\255\252\255\002\000\009\000\250\255\
    \005\000\006\000\249\255\231\255\237\255\241\255\238\255\236\255\
    \235\255\005\000\234\255";
  Lexing.lex_backtrk = 
   "\255\255\023\000\022\000\255\255\255\255\255\255\015\000\016\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\007\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\000\000\255\255\255\255\000\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\020\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\000\000\000\000\000\000\000\000\009\000\005\000\039\000\
    \000\000\000\000\011\000\013\000\000\000\012\000\000\000\010\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\000\000\014\000\007\000\008\000\006\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\038\000\036\000\037\000\035\000\022\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\000\000\000\000\000\000\015\000\025\000\030\000\
    \029\000\017\000\027\000\034\000\018\000\032\000\003\000\041\000\
    \019\000\023\000\028\000\021\000\016\000\024\000\026\000\031\000\
    \033\000\042\000\000\000\000\000\004\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\040\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\000\000\000\000\005\000\
    \255\255\255\255\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\006\000\007\000\007\000\014\000\021\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\000\000\018\000\029\000\
    \016\000\000\000\017\000\033\000\000\000\015\000\000\000\003\000\
    \000\000\022\000\017\000\019\000\000\000\023\000\025\000\030\000\
    \032\000\041\000\255\255\255\255\000\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\004\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 8 "lexer.mll"
                         ( token lexbuf )
# 128 "lexer.ml"

  | 1 ->
# 10 "lexer.mll"
             ( PRINT )
# 133 "lexer.ml"

  | 2 ->
# 12 "lexer.mll"
             ( LET )
# 138 "lexer.ml"

  | 3 ->
# 13 "lexer.mll"
            ( IN )
# 143 "lexer.ml"

  | 4 ->
# 14 "lexer.mll"
            ( IF )
# 148 "lexer.ml"

  | 5 ->
# 15 "lexer.mll"
             ( THEN )
# 153 "lexer.ml"

  | 6 ->
# 16 "lexer.mll"
             ( ELSE )
# 158 "lexer.ml"

  | 7 ->
# 17 "lexer.mll"
           ( EINSTR )
# 163 "lexer.ml"

  | 8 ->
# 19 "lexer.mll"
           ( ADD )
# 168 "lexer.ml"

  | 9 ->
# 20 "lexer.mll"
           ( MINUS )
# 173 "lexer.ml"

  | 10 ->
# 21 "lexer.mll"
            ( MULT )
# 178 "lexer.ml"

  | 11 ->
# 22 "lexer.mll"
           ( DIV )
# 183 "lexer.ml"

  | 12 ->
# 23 "lexer.mll"
           ( MOD )
# 188 "lexer.ml"

  | 13 ->
# 25 "lexer.mll"
           ( EQ )
# 193 "lexer.ml"

  | 14 ->
# 26 "lexer.mll"
           ( NEQ )
# 198 "lexer.ml"

  | 15 ->
# 27 "lexer.mll"
           ( SUP )
# 203 "lexer.ml"

  | 16 ->
# 28 "lexer.mll"
           ( INF )
# 208 "lexer.ml"

  | 17 ->
# 29 "lexer.mll"
            ( SUPEQ )
# 213 "lexer.ml"

  | 18 ->
# 30 "lexer.mll"
            ( INFEQ )
# 218 "lexer.ml"

  | 19 ->
# 32 "lexer.mll"
            ( AND )
# 223 "lexer.ml"

  | 20 ->
# 33 "lexer.mll"
            ( OR )
# 228 "lexer.ml"

  | 21 ->
# 34 "lexer.mll"
                ( NOT )
# 233 "lexer.ml"

  | 22 ->
let
# 36 "lexer.mll"
                  s
# 239 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 36 "lexer.mll"
                      ( CONST (int_of_string s) )
# 243 "lexer.ml"

  | 23 ->
let
# 37 "lexer.mll"
                  s
# 249 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 37 "lexer.mll"
                      ( VARIABLE (s) )
# 253 "lexer.ml"

  | 24 ->
# 39 "lexer.mll"
           ( EOL )
# 258 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

