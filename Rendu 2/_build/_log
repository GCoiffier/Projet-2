### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules main.ml > main.ml.depends # cached
# Target: argv.ml.depends, tags: { extension:ml, file:argv.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules argv.ml > argv.ml.depends # cached
# Target: fouine.ml.depends, tags: { extension:ml, file:fouine.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules fouine.ml > fouine.ml.depends # cached
# Target: data_structures.ml.depends, tags: { extension:ml, file:data_structures.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules data_structures.ml > data_structures.ml.depends # cached
# Target: data_structures.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:data_structures.cmo, file:data_structures.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o data_structures.cmo data_structures.ml # cached
# Target: expr_arith.ml.depends, tags: { extension:ml, file:expr_arith.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules expr_arith.ml > expr_arith.ml.depends # cached
# Target: expr_arith.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:expr_arith.cmo, file:expr_arith.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o expr_arith.cmo expr_arith.ml # cached
# Target: expr_bool.ml.depends, tags: { extension:ml, file:expr_bool.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules expr_bool.ml > expr_bool.ml.depends # cached
# Target: expr_bool.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:expr_bool.cmo, file:expr_bool.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o expr_bool.cmo expr_bool.ml # cached
# Target: fouine.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:fouine.cmo, file:fouine.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o fouine.cmo fouine.ml # cached
# Target: lexParInterface.ml.depends, tags: { extension:ml, file:lexParInterface.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexParInterface.ml > lexParInterface.ml.depends # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly, tags: { extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc -v parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o lexer.cmo lexer.ml
+ /usr/bin/ocamlc -c -o lexer.cmo lexer.ml
File "lexer.mll", line 36, characters 24-27:
Error: This variant expression is expected to have type Parser.token
       The constructor INT does not belong to type Parser.token
Hint: Did you mean INF or IN?
Command exited with code 2.
# Compilation unsuccessful.
